<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ALVR服务端时延分析</title>
      <link href="/2024/07/10/ALVR/"/>
      <url>/2024/07/10/ALVR/</url>
      
        <content type="html"><![CDATA[<h2 id="时延分析"><a href="#时延分析" class="headerlink" title="时延分析"></a>时延分析</h2><p>代码总体是一个统计管理器（<code>StatisticsManager</code>），用于收集和报告有关视频流管道的各种延迟和统计数据。总体的框图如下：</p><p><img src="/../images/ALVR/%E6%B5%81%E7%A8%8B%E5%9B%BE.png"></p><p>以下是各个模块的时间开销及其计算实现的详细说明：</p><h3 id="1-总管道延迟-total-pipeline-latency"><a href="#1-总管道延迟-total-pipeline-latency" class="headerlink" title="1. 总管道延迟 (total_pipeline_latency)"></a>1. 总管道延迟 (<code>total_pipeline_latency</code>)</h3><p><strong>意义</strong>：总管道延迟表示<strong>从客户端发送跟踪数据到客户端最终显示帧的总时间</strong>。它反映了整个管道的效率，包括所有处理步骤的时间开销。</p><p><strong>计算实现</strong>：<code>client_stats.total_pipeline_latency</code> 包含整个管道的总延迟时间，该时间由客户端发送。 </p><h3 id="2-游戏时间延迟-game-time-latency"><a href="#2-游戏时间延迟-game-time-latency" class="headerlink" title="2. 游戏时间延迟 (game_time_latency)"></a>2. 游戏时间延迟 (<code>game_time_latency</code>)</h3><p><strong>意义</strong>：游戏时间延迟表示<strong>从接收到跟踪数据到帧显示的时间</strong>。这部分延迟是从服务器开始处理到帧被显示所需的时间。</p><p><strong>计算实现</strong>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">game_time_latency</span> = frame</span><br><span class="line">    .frame_present</span><br><span class="line">    .<span class="title function_ invoke__">saturating_duration_since</span>(frame.tracking_received);</span><br></pre></td></tr></table></figure><p>这段代码计算了帧显示时间和接收到跟踪数据时间的差值。</p><h3 id="3-服务器合成延迟-server-compositor-latency"><a href="#3-服务器合成延迟-server-compositor-latency" class="headerlink" title="3. 服务器合成延迟 (server_compositor_latency)"></a>3. 服务器合成延迟 (<code>server_compositor_latency</code>)</h3><p><strong>意义</strong>：服务器合成延迟表示<strong>从帧显示到帧合成完成的时间</strong>。这是服务器处理和准备帧的时间。</p><p><strong>计算实现</strong>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">server_compositor_latency</span> = frame</span><br><span class="line">    .frame_composed</span><br><span class="line">    .<span class="title function_ invoke__">saturating_duration_since</span>(frame.frame_present);</span><br></pre></td></tr></table></figure><p>这段代码计算了帧合成时间和帧显示时间的差值。</p><h3 id="4-编码延迟-encoder-latency"><a href="#4-编码延迟-encoder-latency" class="headerlink" title="4. 编码延迟 (encoder_latency)"></a>4. 编码延迟 (<code>encoder_latency</code>)</h3><p><strong>意义</strong>：编码延迟表示从帧合成完成到帧编码完成的时间。这是视频帧在服务器上被编码的时间。</p><p><strong>计算实现</strong>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">encoder_latency</span> = frame</span><br><span class="line">    .frame_encoded</span><br><span class="line">    .<span class="title function_ invoke__">saturating_duration_since</span>(frame.frame_composed);</span><br></pre></td></tr></table></figure><p>这段代码计算了帧编码时间和帧合成时间的差值。</p><h3 id="5-网络延迟-network-latency"><a href="#5-网络延迟-network-latency" class="headerlink" title="5. 网络延迟 (network_latency)"></a>5. 网络延迟 (<code>network_latency</code>)</h3><p><strong>意义</strong>：网络延迟表示数据包在网络上传输的时间。它是总延迟减去所有其他已知处理延迟后的剩余部分。</p><p><strong>计算实现</strong>：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">network_latency</span> = frame.total_pipeline_latency.<span class="title function_ invoke__">saturating_sub</span>(</span><br><span class="line">    game_time_latency</span><br><span class="line">        + server_compositor_latency</span><br><span class="line">        + encoder_latency</span><br><span class="line">        + client_stats.video_decode</span><br><span class="line">        + client_stats.video_decoder_queue</span><br><span class="line">        + client_stats.rendering</span><br><span class="line">        + client_stats.vsync_queue,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这段代码通过从总延迟中减去所有其他已知处理延迟来计算网络延迟。</p><h3 id="6-解码延迟-client-stats-video-decode"><a href="#6-解码延迟-client-stats-video-decode" class="headerlink" title="6. 解码延迟 (client_stats.video_decode)"></a>6. 解码延迟 (<code>client_stats.video_decode</code>)</h3><p><strong>意义</strong>：解码延迟表示视频帧在客户端被解码的时间。</p><p><strong>计算实现</strong>：<code>client_stats.video_decode</code> 包含解码延迟时间，该时间由客户端发送。</p><h3 id="7-解码队列延迟-client-stats-video-decoder-queue"><a href="#7-解码队列延迟-client-stats-video-decoder-queue" class="headerlink" title="7. 解码队列延迟 (client_stats.video_decoder_queue)"></a>7. 解码队列延迟 (<code>client_stats.video_decoder_queue</code>)</h3><p><strong>意义</strong>：解码队列延迟表示视频帧在解码队列中等待解码的时间。</p><p><strong>计算实现</strong>：<code>client_stats.video_decoder_queue</code> 包含解码队列延迟时间，该时间由客户端发送。</p><h3 id="8-客户端渲染延迟-client-stats-rendering"><a href="#8-客户端渲染延迟-client-stats-rendering" class="headerlink" title="8. 客户端渲染延迟 (client_stats.rendering)"></a>8. 客户端渲染延迟 (<code>client_stats.rendering</code>)</h3><p><strong>意义</strong>：客户端渲染延迟表示视频帧在客户端被合成处理的时间。</p><p><strong>计算实现</strong>：<code>client_stats.rendering</code> 包含客户端渲染延迟时间，该时间由客户端发送。</p><h3 id="9-垂直同步队列延迟-client-stats-vsync-queue"><a href="#9-垂直同步队列延迟-client-stats-vsync-queue" class="headerlink" title="9. 垂直同步队列延迟 (client_stats.vsync_queue)"></a>9. 垂直同步队列延迟 (<code>client_stats.vsync_queue</code>)</h3><p><strong>意义</strong>：垂直同步队列延迟表示视频帧在垂直同步队列中等待显示的时间。</p><p><strong>计算实现</strong>：<code>client_stats.vsync_queue</code> 包含垂直同步队列延迟时间，该时间由客户端发送。</p><h3 id="汇总报告统计数据"><a href="#汇总报告统计数据" class="headerlink" title="汇总报告统计数据"></a>汇总报告统计数据</h3><p>在一定时间间隔内（<code>FULL_REPORT_INTERVAL</code>），统计管理器会汇总所有收集到的统计数据，并生成一个<code>StatisticsSummary</code>事件，报告各种统计信息，如总视频包数、视频字节数、丢包数、延迟时间、客户端和服务器的帧率等。</p><p>这些统计信息通过以下代码生成并发送事件：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.last_full_report_instant + FULL_REPORT_INTERVAL &lt; Instant::<span class="title function_ invoke__">now</span>() &#123;</span><br><span class="line">    <span class="keyword">self</span>.last_full_report_instant += FULL_REPORT_INTERVAL;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">interval_secs</span> = FULL_REPORT_INTERVAL.<span class="title function_ invoke__">as_secs_f32</span>();</span><br><span class="line"></span><br><span class="line">    alvr_events::<span class="title function_ invoke__">send_event</span>(EventType::<span class="title function_ invoke__">StatisticsSummary</span>(StatisticsSummary &#123;</span><br><span class="line">        video_packets_total: <span class="keyword">self</span>.video_packets_total,</span><br><span class="line">        video_packets_per_sec: (<span class="keyword">self</span>.video_packets_partial_sum <span class="keyword">as</span> <span class="type">f32</span> / interval_secs) <span class="keyword">as</span> _,</span><br><span class="line">        video_mbytes_total: (<span class="keyword">self</span>.video_bytes_total <span class="keyword">as</span> <span class="type">f32</span> / <span class="number">1e6</span>) <span class="keyword">as</span> <span class="type">usize</span>,</span><br><span class="line">        video_mbits_per_sec: <span class="keyword">self</span>.video_bytes_partial_sum <span class="keyword">as</span> <span class="type">f32</span> * <span class="number">8</span>. / <span class="number">1e6</span> / interval_secs,</span><br><span class="line">        total_latency_ms: client_stats.total_pipeline_latency.<span class="title function_ invoke__">as_secs_f32</span>() * <span class="number">1000</span>.,</span><br><span class="line">        network_latency_ms: network_latency.<span class="title function_ invoke__">as_secs_f32</span>() * <span class="number">1000</span>.,</span><br><span class="line">        encode_latency_ms: encoder_latency.<span class="title function_ invoke__">as_secs_f32</span>() * <span class="number">1000</span>.,</span><br><span class="line">        decode_latency_ms: client_stats.video_decode.<span class="title function_ invoke__">as_secs_f32</span>() * <span class="number">1000</span>.,</span><br><span class="line">        packets_lost_total: <span class="keyword">self</span>.packets_lost_total,</span><br><span class="line">        packets_lost_per_sec: (<span class="keyword">self</span>.packets_lost_partial_sum <span class="keyword">as</span> <span class="type">f32</span> / interval_secs) <span class="keyword">as</span> _,</span><br><span class="line">        client_fps: client_fps <span class="keyword">as</span> _,</span><br><span class="line">        server_fps: server_fps <span class="keyword">as</span> _,</span><br><span class="line">        battery_hmd: (<span class="keyword">self</span>.battery_gauges.<span class="title function_ invoke__">get</span>(&amp;HEAD_ID).<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">unwrap_or_default</span>().gauge_value * <span class="number">100</span>.) <span class="keyword">as</span> <span class="type">u32</span>,</span><br><span class="line">        hmd_plugged: <span class="keyword">self</span>.battery_gauges.<span class="title function_ invoke__">get</span>(&amp;HEAD_ID).<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">unwrap_or_default</span>().is_plugged,</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span>.video_packets_partial_sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">self</span>.video_bytes_partial_sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">self</span>.packets_lost_partial_sum = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每帧调用 <code>report_statistics</code> 方法时，会检查是否需要生成并发送统计报告。如果需要，会收集所有统计数据，并通过 <code>alvr_events::send_event</code> 方法发送 <code>StatisticsSummary</code> 事件。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>通过这些模块时间开销的计算和实现，统计管理器可以详细监控和报告视频流管道中各个阶段的延迟和性能数据。这些数据有助于优化视频流管道，提高整体系统性能和用户体验。</p><h2 id="特定数据结构分析"><a href="#特定数据结构分析" class="headerlink" title="特定数据结构分析"></a>特定数据结构分析</h2><p>代码中的 <code>std::collections::&#123;HashMap, VecDeque&#125;</code> 和 <code>std::time::&#123;Duration, Instant&#125;</code> 导入了Rust标准库中的四个模块。这些模块用于管理数据结构和时间处理。下面是它们的详细作用和解释：</p><h3 id="std-collections-HashMap-VecDeque"><a href="#std-collections-HashMap-VecDeque" class="headerlink" title="std::collections::{HashMap, VecDeque}"></a><code>std::collections::&#123;HashMap, VecDeque&#125;</code></h3><ol><li><p><strong><code>HashMap</code></strong></p><ul><li><p><strong>作用</strong>：<code>HashMap</code> 是一个哈希表实现的键值对集合。它允许快速插入、删除和查找操作。</p></li><li><p><strong>详细解释</strong>：</p><ul><li><strong>键值对存储</strong>：<code>HashMap</code> 存储的是键值对，每个键都唯一对应一个值。</li><li><strong>使用场景</strong>：在代码中，<code>HashMap</code> 被用来存储电池数据 (<code>battery_gauges</code>)。键是设备ID（<code>u64</code> 类型），值是 <code>BatteryData</code> 结构体。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">battery_gauges: HashMap&lt;<span class="type">u64</span>, BatteryData&gt;</span><br></pre></td></tr></table></figure><p>例如，当报告电池状态时，通过设备ID快速查找到对应的电池数据，并更新其状态。</p></li></ul></li><li><p><strong><code>VecDeque</code></strong></p><ul><li><p><strong>作用</strong>：<code>VecDeque</code> 是一个双端队列，它允许在队列的两端高效地添加和移除元素。</p></li><li><p><strong>详细解释</strong>：</p><ul><li><strong>双端操作</strong>：<code>VecDeque</code> 支持在队列的头部和尾部进行高效的插入和删除操作，比 <code>Vec</code> 更适合需要频繁操作两端的场景。</li><li><strong>使用场景</strong>：在代码中，<code>VecDeque</code> 被用来存储历史帧 (<code>history_buffer</code>)。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history_buffer: VecDeque&lt;HistoryFrame&gt;</span><br></pre></td></tr></table></figure><p>例如，在报告跟踪数据时，新的帧数据会被添加到队列的头部（<code>push_front</code>），如果队列长度超过最大历史大小，则从尾部移除最旧的帧数据（<code>pop_back</code>）。</p></li></ul></li></ol><h3 id="std-time-Duration-Instant"><a href="#std-time-Duration-Instant" class="headerlink" title="std::time::{Duration, Instant}"></a><code>std::time::&#123;Duration, Instant&#125;</code></h3><ol><li><p><strong><code>Duration</code></strong></p><ul><li><p><strong>作用</strong>：<code>Duration</code> 表示一个时间段，以秒和纳秒为单位。它可以用于表示两个时间点之间的差值或一个特定的时间长度。</p></li><li><p><strong>详细解释</strong>：</p><ul><li><strong>时间段表示</strong>：<code>Duration</code> 可以表示从几纳秒到数年的时间段。</li><li><strong>时间计算</strong>：在代码中，<code>Duration</code> 用于表示各种延迟时间和间隔时间。例如，总管道延迟、帧间隔、视频解码延迟等。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total_pipeline_latency: Duration,</span><br><span class="line">frame_interval: Duration,</span><br></pre></td></tr></table></figure><p>使用 <code>Duration</code> 可以进行时间的加减运算和比较操作。</p></li></ul></li><li><p><strong><code>Instant</code></strong></p><ul><li><p><strong>作用</strong>：<code>Instant</code> 表示一个特定的瞬时时间点，通常用于测量时间间隔。</p></li><li><p><strong>详细解释</strong>：</p><ul><li><strong>时间点表示</strong>：<code>Instant</code> 表示从某个固定时间点（通常是程序启动时间）到当前时间的一个时间点。</li><li><strong>测量时间间隔</strong>：在代码中，<code>Instant</code> 用于记录各种时间点，如接收到跟踪数据的时间、帧显示时间、帧合成时间等。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tracking_received: Instant,</span><br><span class="line">frame_present: Instant,</span><br><span class="line">frame_composed: Instant,</span><br></pre></td></tr></table></figure><p>例如，计算两次时间点之间的间隔可以使用 <code>saturating_duration_since</code> 方法：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">game_time_latency</span> = frame.frame_present.<span class="title function_ invoke__">saturating_duration_since</span>(frame.tracking_received);</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="综上所述："><a href="#综上所述：" class="headerlink" title="综上所述："></a>综上所述：</h3><ul><li><code>HashMap</code> 用于存储键值对数据，支持高效查找和更新。</li><li><code>VecDeque</code> 用于存储历史帧数据，支持高效的双端操作。</li><li><code>Duration</code> 用于表示时间段和进行时间计算。</li><li><code>Instant</code> 用于表示具体的时间点和测量时间间隔。</li></ul><p>这些模块共同作用，使得代码能够高效地管理视频流管道中的各种时间和统计数据。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2023/07/18/2023-7-18-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/07/18/2023-7-18-%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="这是我的第一篇文章"><a href="#这是我的第一篇文章" class="headerlink" title="这是我的第一篇文章"></a>这是我的第一篇文章</h2><h3 id="格式（O）功能的适用"><a href="#格式（O）功能的适用" class="headerlink" title="格式（O）功能的适用"></a>格式（O）功能的适用</h3><ul><li>图像的插入</li></ul><p><img src="/../images/yuanshen/keli.png"></p><ul><li>加粗</li></ul><p><strong>展示效果如下</strong></p><ul><li><p>斜体</p><p><em>展示效果如下</em></p></li><li><p>下划线</p><p><u>展示效果如下</u></p></li><li><p>代码</p><p>展示效果如下</p><p>另加一份代码片段</p><p><code>deploy:type: gitrepository: git@github.com:xdzqyyds/xdzqyyds.github.io.gitbranch: main</code></p></li><li><p>删除线</p><p><del>展示效果如下</del></p></li><li><p>注释</p><!--展示效果如下--></li><li><p>超链接</p><p><a href="https://xdzqyyds.github.io/">Zq Blog - Zq Blog (xdzqyyds.github.io)</a></p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/configuration.html</span></span><br><span class="line">## Source: https:<span class="comment">//github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"># Site</span><br><span class="line">title: Zq Blog</span><br><span class="line">subtitle: <span class="string">&#x27;Zq Blog&#x27;</span></span><br><span class="line">description: <span class="string">&#x27;一个记录分享学习、生活的地方&#x27;</span></span><br><span class="line">keywords: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">author: ZQ</span></span><br><span class="line"><span class="string">language: zh-CN</span></span><br><span class="line"><span class="string">timezone: &#x27;</span>&#x27;</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, <span class="keyword">if</span> you use GitHub Page, <span class="built_in">set</span> url as <span class="string">&#x27;https://username.github.io/project&#x27;</span></span><br><span class="line">url: http:<span class="comment">//example.com</span></span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> # Set to <span class="literal">false</span> to remove trailing <span class="string">&#x27;index.html&#x27;</span> from permalinks</span><br><span class="line">  trailing_html: <span class="literal">true</span> # Set to <span class="literal">false</span> to remove trailing <span class="string">&#x27;.html&#x27;</span> from permalinks</span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line">new_post_name: :year-:month-:day-:title.md # File name of new posts</span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> # Transform title into titlecase</span><br><span class="line">external_link:</span><br><span class="line">  enable: <span class="literal">true</span> # Open external links in new tab</span><br><span class="line">  field: site # Apply to the whole site</span><br><span class="line">  exclude: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string">filename_case: 0</span></span><br><span class="line"><span class="string">render_drafts: false</span></span><br><span class="line"><span class="string">post_asset_folder: false</span></span><br><span class="line"><span class="string">relative_link: false</span></span><br><span class="line"><span class="string">future: true</span></span><br><span class="line"><span class="string">highlight:</span></span><br><span class="line"><span class="string">  enable: true</span></span><br><span class="line"><span class="string">  line_number: true</span></span><br><span class="line"><span class="string">  auto_detect: false</span></span><br><span class="line"><span class="string">  tab_replace: &#x27;</span>&#x27;</span><br><span class="line">  wrap: <span class="literal">true</span></span><br><span class="line">  hljs: <span class="literal">false</span></span><br><span class="line">prismjs:</span><br><span class="line">  enable: <span class="literal">false</span></span><br><span class="line">  preprocess: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  tab_replace: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Home page setting</span></span><br><span class="line"><span class="string"># path: Root path for your blogs index page. (default = &#x27;</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="string"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="string">index_generator:</span></span><br><span class="line"><span class="string">  path: &#x27;</span>&#x27;</span><br><span class="line">  per_page: <span class="number">6</span></span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"># Metadata elements</span><br><span class="line">#<span class="meta"># https:<span class="comment">//developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span></span><br><span class="line">meta_generator: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">#<span class="meta"># http:<span class="comment">//momentjs.com/docs/#/displaying/format/</span></span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">## updated_option supports <span class="string">&#x27;mtime&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;empty&#x27;</span></span><br><span class="line">updated_option: <span class="string">&#x27;mtime&#x27;</span></span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to <span class="number">0</span> to disable pagination</span><br><span class="line">per_page: <span class="number">10</span></span><br><span class="line">pagination_dir: page</span><br><span class="line"></span><br><span class="line"># Include / Exclude file(s)</span><br><span class="line">#<span class="meta"># <span class="keyword">include</span>:/exclude: options only apply to the <span class="string">&#x27;source/&#x27;</span> folder</span></span><br><span class="line">include:</span><br><span class="line">exclude:</span><br><span class="line">ignore:</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## Plugins: https:<span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## Themes: https:<span class="comment">//hexo.io/themes/</span></span><br><span class="line">theme: butterfly</span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https:<span class="comment">//hexo.io/docs/one-command-deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:xdzqyyds/xdzqyyds.github.io.git</span><br><span class="line">  branch: main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: all</span><br><span class="line">  content: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="/../images/ganyu.png"></p><h3 id="段落功能（P）的使用"><a href="#段落功能（P）的使用" class="headerlink" title="段落功能（P）的使用"></a>段落功能（P）的使用</h3><ol><li><p>好好学习</p></li><li><p>天天向上</p></li><li><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td></tr><tr><td>7</td><td>8</td><td>9</td></tr><tr><td>10</td><td>11</td><td>12</td></tr></tbody></table></li><li><p>$$<br>1+1&#x3D;2<br>$$</p></li></ol><p>$$<br>empouod&#x3D;jkad+DQW<br>$$</p><hr><blockquote><p>人言道： </p></blockquote><ul><li><input disabled="" type="checkbox"> 3232</li><li><input disabled="" type="checkbox"> 2484</li><li><input disabled="" type="checkbox"> 4548</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第三篇文章</title>
      <link href="/2023/07/18/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/07/18/%E7%AC%AC%E4%B8%89%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第二篇文章</title>
      <link href="/2023/07/18/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2023/07/18/%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><!-- GitCalendar容器 --></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><div id="gitZone"></div></h1>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.88);  --trans-dark: rgba(25, 25, 25, 0.88);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(5px) saturate(150%);}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(5) .menus_item_child {  left: -38px;}/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 闪烁变动颜色连续渐变 */#site-name,#site-title,#site-subtitle,#post-info,.author-info__name,.author-info__description {  transition: text-shadow 1s linear !important;}/* 背景宇宙星光  */#universe{  display: block;  position: fixed;  margin: 0;  padding: 0;  border: 0;  outline: 0;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */  z-index: -1;}/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/*菜单栏图标大小*/svg.menu_icon {  width: 1.7em;  height: 1.7em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}/*社交图标*/svg.social_icon {  width: 1.20em;  height: 1.20em;  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
